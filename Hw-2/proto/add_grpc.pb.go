// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.2
// source: add.proto

package my_game

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Mafia_Start_FullMethodName          = "/mafia.Mafia/Start"
	Mafia_VoteProcessing_FullMethodName = "/mafia.Mafia/VoteProcessing"
)

// MafiaClient is the client API for Mafia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MafiaClient interface {
	Start(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (Mafia_StartClient, error)
	VoteProcessing(ctx context.Context, in *Victim, opts ...grpc.CallOption) (*Empty, error)
}

type mafiaClient struct {
	cc grpc.ClientConnInterface
}

func NewMafiaClient(cc grpc.ClientConnInterface) MafiaClient {
	return &mafiaClient{cc}
}

func (c *mafiaClient) Start(ctx context.Context, in *UserInfo, opts ...grpc.CallOption) (Mafia_StartClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mafia_ServiceDesc.Streams[0], Mafia_Start_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &mafiaStartClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mafia_StartClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type mafiaStartClient struct {
	grpc.ClientStream
}

func (x *mafiaStartClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mafiaClient) VoteProcessing(ctx context.Context, in *Victim, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Mafia_VoteProcessing_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MafiaServer is the server API for Mafia service.
// All implementations must embed UnimplementedMafiaServer
// for forward compatibility
type MafiaServer interface {
	Start(*UserInfo, Mafia_StartServer) error
	VoteProcessing(context.Context, *Victim) (*Empty, error)
	mustEmbedUnimplementedMafiaServer()
}

// UnimplementedMafiaServer must be embedded to have forward compatible implementations.
type UnimplementedMafiaServer struct {
}

func (UnimplementedMafiaServer) Start(*UserInfo, Mafia_StartServer) error {
	return status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedMafiaServer) VoteProcessing(context.Context, *Victim) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VoteProcessing not implemented")
}
func (UnimplementedMafiaServer) mustEmbedUnimplementedMafiaServer() {}

// UnsafeMafiaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MafiaServer will
// result in compilation errors.
type UnsafeMafiaServer interface {
	mustEmbedUnimplementedMafiaServer()
}

func RegisterMafiaServer(s grpc.ServiceRegistrar, srv MafiaServer) {
	s.RegisterService(&Mafia_ServiceDesc, srv)
}

func _Mafia_Start_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserInfo)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MafiaServer).Start(m, &mafiaStartServer{stream})
}

type Mafia_StartServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type mafiaStartServer struct {
	grpc.ServerStream
}

func (x *mafiaStartServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Mafia_VoteProcessing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Victim)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).VoteProcessing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mafia_VoteProcessing_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).VoteProcessing(ctx, req.(*Victim))
	}
	return interceptor(ctx, in, info, handler)
}

// Mafia_ServiceDesc is the grpc.ServiceDesc for Mafia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mafia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mafia.Mafia",
	HandlerType: (*MafiaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VoteProcessing",
			Handler:    _Mafia_VoteProcessing_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Start",
			Handler:       _Mafia_Start_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "add.proto",
}
